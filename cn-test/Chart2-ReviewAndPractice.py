"""
复习题:
R1: 列出5种非专用的网络应用及他们所使用的应用层协议
浏览器: HTTP
邮件:  HTTP,SMTP
BT下载: P2P,HTTP
目录服务: DNS

(使用RFC中公开定义的)

R2:网络体系结构与应用程序体系结构之间有什么区别?
网络体系机构: 固定的分层的结构
应用程序体系结构: 如 客户-服务器体系结构, 对等(P2P)体系结构

R3: 对两个进程之间的通信会话而言，哪些进程是客户，那个进程是服务器?
发起连接的是客户端, 监听等待被连接的是服务端


R4: 对于一个P2P文件共享应用，是否同意"一个通信会话不存在客户端和服务端的说法"？


R5: 运行在一台主机上的一个进程，使用什么信息来标识运行咋另一台主机上的进程?
套接字(IP + 端口号)

R6:假定你想尽快的处理从远程客户端到服务器的事务，你将使用UDP还是TCP? 为什么？
使用UDP, UDP免去了客户端到服务端的连接，牺牲可靠性的同时也带来了处理效率的提升。


R8: 列出一个运输协议能够提供的4中宽泛类型的服务，对于每种服务，指出是UDP还是TCP? 提供这样的服务?

文件传输:  TCP
吞吐量:    ×
定时:      ×
安全性:    ×

R9: 前面讲过 TCP能用SSL来强化，以提供进程到进程的安全性服务，包括加密。SSL运行在运输层还是应用层?
如果某应用程序研制者想要用SSL来强化UDP, 该研制者应当做些什么工作?
SSL 运行在应用层


R10: 握手协议的作用是什么?
确保双方都能正常收发，以便后续通信时不再进行校验直接接收和发送

R11: 为什么HTTP, SMTP, POP3 都运行在TCP ，而不是UDP ?
这三个协议是数据敏感的，数据丢失可能带来验证后果，所以需要协议提供可靠的数据传输。因此运行在TCP上


R12: 考虑一个电子商务网站需要保留一个客户的购买记录，描述如何使用cookie 来完成该功能？
购买记录存储在服务端数据库中，使用cookie 来存储用户会话的ID，浏览器向服务端发起请求时
在http请求头中携带 Cookie, 服务器接收到cookie 中会话ID时通过用户登录状态获取用户信息
从而锁定用户在数据库中的购买记录

R13: 描述WEB缓存是如何减少被接受请求对象的时延的，web缓存器将减少一个用户请求的所有对象
或者只是其中的某些对象的时延吗？为什么？
WEB 缓存在数据中心之外靠近用户的地方 额外部署或者使用三方的服务器存储对象的副本，用户请求对象时
若发现对象在WEB缓存中存在，就不再向数据中心转发获取对象，由于WEB缓存的距离离用户距离更近，因此可
以减少请求在互联网上经过路由转发数，从而降低了时延。由于WEB缓存容量有限，因此只会较少某些对象的时延
而不能对所有对象都减少时延。


R16: 假定Alice 使用一个基于Web的电子邮箱账户 性Bob 发送报文，而Bob 使用POP3 从他的邮件服务器
访问自己的邮件。讨论该报文是如何从Alice 主机到Bob 主机的。要求列出在两天主机之间移动该报文时
所使用的各种应用层协议。
Alice 使用HTTP协议  将邮件发送到 Alice 邮箱的服务器
Alice邮箱服务器 使用SMTP协议 将邮件从Alice邮箱服务器发送到 BOB邮箱服务器
Bob使用POP3 协议将邮件从服务器下载到本地


R17: 将你最近收到的报文首部打印出来，其中有多少Received: 首部行? 分析该报文的首部行中的每一行。


R18: 从用户的观点看，POP3 协议中下载并删除模式和下载并保留模式有什么区别吗?
下载并删除模式: 在一个客户端下载之后会将服务端的邮件删除, 这样其它客户端将无法下载
下载并保留: 下载邮件之后，邮件依然保留在服务端，可以在多个客户端重复下载

R19: 一个机构的web服务器和邮件服务器可以有完全相同的主机名别名吗? 包含邮件服务器主机名的RR有什么样的类型?


R20: 仔细检查收到的电子邮件，查找由使用.edu 电子邮件地址的用户发送的报文首部。从其首部能够确定发送该报文的主机的IP
地址吗? 对于有GMail 账号发送的报文做相同的事。

R21: 在BitTorrent中，假定Alice 向 Bob提供一个30秒间隔的文件块吞吐量。 Bob将必须进行回报，
在相同的间隔中向Alice 提供文件块吗？为什么?

R22: 考虑一个新对等方Alice 加入BitTorrent 而不拥有任何文件块。没有任何块，因此她没有任何东西可以上载，
她无法成为任何其他对等方的前4位上载者。那么Alice 将怎样得到她的第一个文件块?

R23: 覆盖网络是什么？ 它包括路由器吗? 在覆盖网络中边是什么?


"""

"""

    套接字编程
    
    1. WEB服务器
    使用Python 语言开发一个简单的Web 服务器, 它仅能处理一个请求。具体而言，你的Web服务器将:
    (1) 当一个客户端(浏览器) 联系时创建一个连接套接字
    (2) 从这个连接接收HTTP请求,
    (3) 解释该请求以确定所请求的特定文件
    (4) 从服务器的文件系统获得请求的文件
    (5) 创建一个由请求的文件组成的HTTP响应报文, 报文前面有首部行
    (6) 经TCP 连接向请求的浏览器发送响应。
    如果浏览器请求一个在该服务器中不存在的文件，服务器应当返回一个 "404 Not Found" 差错报文 
    
    在配套网站中, 我们提供了用于该服务器的框架代码。你的任务是完善该代码，运行你的服务器。
    通过在不同的主机上运行的浏览器发送请求来测试该服务器。如果运行你服务器的主机上已经有一个 Web服务器
    在运行. 你应当为该Web服务器使用一个不同于 80端口的其他端口。
        
    

    2. UDP Ping 程序
    使用Python编写一个客户ping程序。该程序将发送一个简单的ping报文, 接收一个从服务器返回的对应pong报文。
    并确认从该客户发送ping 报文到接收到 pong 报文为止的时延。
    该时延成为往返时延 RTT。由该客户和服务器提供的功能类似于在现在操作系统中可用的标准ping程序。
    然而，标准的ping使用互联网控制报文协议(ICMP) ,此时我们将创建一个非标准的基于UDP的ping程序。
    你的 ping程序经UDP向目标服务器发送10个ping报文。对于每个报文，当对应的pong报文返回时，你的客户要确定
    和打印RTT. 因为UDP是一个不可靠的协议，由客户发送的分组可能会丢失。为此 客户不能无限期的等待ping报文的回答。
    客户等待服务器回答的时间至多为1秒。 如果没有收到回答，客户假定该分组丢失并响应的打印一条报文。
    
    为此作业中, 你将给出服务器的完整代码。你的任务是编写客户端代码， 该代码与服务器代码非常相似。建议你先仔细学习服务器
    的代码，然后编写你的客户端代码，可以随意地从服务器代码中剪贴代码行。


    3. 邮件客户
    创建一个向任何接收方发送电子邮件的简单邮件客户。你的客户将必须与邮件服务器 (如谷歌的电子邮件服务器) 创建一个TCP连接，
    使用 SMTP协议与邮件服务器进行交谈, 经该邮件服务器向某接收方发送一个电子邮件报文，最后关闭该邮件服务器的TCP连接。
    
    对于本作业,配套Web站点为你的客户提供了框架代码, 你的任务是完善该代码并通过向不同的用户账户发送电子邮件来测试你的客户。
    你可以尝试通过不同的服务器 进行发送。
    
    
    4. Web 代理服务器
    编写一个Web 代理服务器，当代理服务器从一个浏览器节后到对象http的请求,就生成对相同对象的一个新的HTTP 请求,并向初始服务器
    发送. 当该代理从初始服务器接收到具有该对象的http响应时，它生成一个包含该对象的新的HTTP响应， 并发送给该客户。
    这个代理将是多线程的，使其在相同时间能够处理多个请求。
    
    
"""

"""
    1. wireshark HTTP 实验
    
    2. wireshark DNS 实验

"""
